from flask import render_template, request, jsonify, send_file, current_app, send_from_directory, abort
from app import app
from werkzeug.utils import secure_filename
import os
import time
import json
import pandas as pd
from moviepy.editor import VideoFileClip
import os


def convert_to_mp4(video_path):
    """
    Convert the input video file to MP4 format if it is not already in MP4 format.
    
    Args:
    video_path (str): Path to the input video file.
    
    Returns:
    str: Path to the converted MP4 video file.
    """
    # Check if the file is already an MP4
    if video_path.lower().endswith('.mp4'):
        return video_path
    
    # Define the new file path with an .mp4 extension
    mp4_video_path = os.path.splitext(video_path)[0] + '.mp4'
    
    # Load the video file
    video = VideoFileClip(video_path)
    
    # Write the video file to MP4 format
    video.write_videofile(mp4_video_path, codec='libx264', audio_codec='aac')
    
    # Close the video file
    video.close()
    
    return mp4_video_path

def process_video(video_path, csv_path, testing=False):
    # Example detections from the model (these would typically be generated by your model)
    detections = [
        {"time": 12.5, "description": "Organism", "image": "Fake_Fish_Cropped.png"},
        {"time": 45.3, "description": "Organism", "image": "Fish_0.png"},
        {"time": 78.6, "description": "Fish", "image": "Fish_1_1.png"},
        {"time": 100.2, "description": "Unidentified", "image": "Fish_1_2.png"},
        {"time": 123.4, "description": "Unidentified", "image": "Fish_2.png"},
        {"time": 145.6, "description": "Unidentified", "image": "Fish_3.png"}
    ]
    
    # Load annotations from the CSV
    annotations_df = pd.read_csv(csv_path)
    # Example: Assuming there's a column 'timecode' for annotations in seconds
    annotated_times = annotations_df['timecode'].tolist()
    total_annotations = len(annotated_times)

    annotated = []
    unannotated = []

    for detection in detections:
        is_annotated = any(abs(detection['time'] - ann_time) < 1 for ann_time in annotated_times)
        if is_annotated:
            annotated.append(detection)
        else:
            unannotated.append(detection)

    total_annotated_detected = len(annotated)
    total_unannotated_detected = len(unannotated)

    return detections, annotated, unannotated, total_annotations, total_annotated_detected, total_unannotated_detected

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload():
    testing_mode = current_app.config.get('TESTING', False)
    if 'video' not in request.files or 'csv' not in request.files:
        return jsonify({'error': 'No file part'}), 400

    video = request.files['video']
    csv_file = request.files['csv']

    if video.filename == '' or csv_file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    video_filename = secure_filename(video.filename)
    csv_filename = secure_filename(csv_file.filename)

    video_path = os.path.join(app.config['UPLOAD_FOLDER'], video_filename)
    csv_path = os.path.join(app.config['UPLOAD_FOLDER'], csv_filename)
    video.save(video_path)
    csv_file.save(csv_path)

    mp4_video_path = convert_to_mp4(video_path)
    detections, annotated, unannotated, total_annotations, total_annotated_detected, total_unannotated_detected = process_video(mp4_video_path, csv_path, testing=testing_mode)

    return jsonify({
        'detections': detections,
        'annotated': annotated,
        'unannotated': unannotated,
        'total_annotations': total_annotations,
        'total_annotated_detected': total_annotated_detected,
        'total_unannotated_detected': total_unannotated_detected
    })

@app.route('/demo', methods=['GET'])
def demo():
    demo_data_path = os.path.join(app.config['UPLOAD_FOLDER'], 'demo', 'demo_detections.json')
    
    # Simulate processing time with a 2-minute progress bar
    time.sleep(120)

    with open(demo_data_path, 'r') as f:
        detections_data = json.load(f)
    
    # Calculate summary data if not already present in the JSON
    if 'total_annotations' not in detections_data:
        total_annotations = len(detections_data['annotated'])
        total_annotated_detected = len(detections_data['annotated'])
        total_unannotated_detected = len(detections_data['unannotated'])
        detections_data.update({
            'total_annotations': total_annotations,
            'total_annotated_detected': total_annotated_detected,
            'total_unannotated_detected': total_unannotated_detected
        })

    return jsonify(detections_data)


@app.route('/uploads/<path:filename>')
def serve_uploads(filename):
    if filename.startswith('uploads/'):
        filename = filename[8:]

    base_dir = app.config['UPLOAD_FOLDER']
    full_path = os.path.join(base_dir, filename)
    app.logger.debug(f"Full path: {full_path}")

    if not os.path.exists(full_path):
        app.logger.debug(f"File not found: {full_path}")
        return abort(404)

    directory = os.path.dirname(full_path)
    filename = os.path.basename(full_path)

    return send_from_directory(directory, filename)

@app.route('/download/<list_type>', methods=['GET'])
def download(list_type):
    list_types = ['detections', 'annotated', 'unannotated']
    if list_type not in list_types:
        return jsonify({'error': 'Invalid list type'}), 400

    list_file_path = os.path.join(app.config['UPLOAD_FOLDER'], f"{list_type}.csv")

    if not os.path.exists(list_file_path):
        return jsonify({'error': 'File not found'}), 404

    return send_file(list_file_path, as_attachment=True)
